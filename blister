#!/bin/bash
# Blister
# Author: Andrew T. Withers (atw31337@gmail.com)
# Description: This script will download and parse blacklists into ASA configuration format. Commented lines, lines starting with a '#', will be ignored.
# All other lines must either contain a valid IPv4 or IPv6 address (192.168.1.0, fd08:23eb:5a25:7df1:0000:0000:0000:0001), a IPv4 subnet in CIDR notation
# (192.168.1.0/24), or an IPv4 range (192.168.1.0-192.168.1.55). A fqdn function has been added to enable the parsing of URL blacklists. Any URLs containing
# wildcards will be removed because the ASA does not allow them to be used in FQDNs. Lists that follow these formats can be added or removed in the
# "Declare and Parse Blacklists" section. Lists that do not follow these formats will require case specific scripting that can be added to the "Special Cases"
# function section. Feel free to contact me for assistance or Special Case requests.
################################################################################################################################################################

setup() {
# Func: Get configuration variables and create blister.conf

# Declare local variables
local outFile
local blockedGroup
local email
local maxThreads

echo "Configuratoin setup: "
read -p "Please enter the default output file. [/opt/blister/blister.output]: " outFile
[[ -z $outFile ]] && outFile="/opt/blister/blister.output"
while [[ -z $blockedGroup ]]; do
	echo "Please enter the name of the object group that is utilized in the ACL to block malicious traffic: "
	read blockedGroup
done
while [[ -z $maxThreads ]]; do
	read -p "Please enter the maximum number of threads: " maxThreads
done
echo "Enter a destination email address if you would like the output emailed to you. Note: Requires mutt and an email server: "
read email
while [[ -n $email ]] && ! echo "$email" | grep -q @; do
	read -p "Invalid email address. Please try again: " email
done

# Generate configuration file
cat <<EOF > /etc/blister.conf
# /etc/blister.conf

# Default output file
OUTPUT=$outFile

# Object group utilized in ACL to block malicious traffic
BLOCKEDGROUP=$blockedGroup

# Maximum number of threads
MAXTHREADS=$maxThreads

# Recipient email address if you would like the output emailed to you. Note: Requires mutt and an email server.
EMAIL=$email

EOF

# Setup files and directories
if [[ -f ./blacklists ]]; then
	cp ./blacklists /opt/blister/
else
	while ! [[ -f $answer ]]; do
		read -p "Please enter the file path of the file containing the blacklist URLs: " answer
		[[ -f $answer ]] || echo "That file does not exist"
	done
	cp "$answer" /opt/blister/blacklists
fi
}

mask() {
# Evaluates CIDR notation and prints the Mask notation equivalent

oct=$(($1 / 8 ))	# First octet that is not equal to 255 (0-3)
mask[0]=255		# First octet must be 255
for (( i=1; i < "$oct"; i++ )); do	# Set octets prior to $oct as 255
	mask["$i"]=255
done
mod=$(( $1 % 8 ))	# Determine the mask value for the first octect that is not equal to 255
if [[ $mod  -gt 0 ]]; then
	expo=$(( 8 - mod ))
	value=$(( 256 - 2**expo ))
	mask["$oct"]="$value"
fi
for (( i=1; i<4; i++ )); do
	if [[ -z ${mask["$i"]} ]]; then	# Set remaining octets to 0
		mask["$i"]=0
	fi
done
echo "${mask[0]}.${mask[1]}.${mask[2]}.${mask[3]}"	# Print the mask
}

check_source() {
if [[ -n $file ]]; then
	if [[ -f $1 ]]; then
		cp "$1" "$tempIn"
	else
		echo "blister: $1 does not exist"
<<<<<<< HEAD
=======
		[[ -d /opt/blister/threads ]] && rm -rf /opt/blister/threads
>>>>>>> experimental
		exit 1
	fi
elif [[ $(curl -s -o "$tempIn" -w "%{http_code}" "$1") -eq 200 ]]; then
	:
else
	[[ -f $tempIn ]] && rm -f "$tempIn"
fi
}

fqdn_parse() {  # Parses URL blacklists
# Remove wildcards and URL paths
sed -i '/*/d' "$fqdn" && cut -d '/' -f1 "$fqdn" | sort | uniq > "$tempIn" && rm -f "$fqdn"

while read line; do
	printf "exit\n" >> "$tempOut"
	printf "object network %s\n" "$line" >> "$tempOut"
	printf "fqdn %s\n" "$line" >> "$tempOut"
	printf "object-group network %s\n" "$1" >> "$tempOut"
	printf "network-object object %s\n" "$line" >> "$tempOut"
done < "$tempIn"
}

parse() {
tempIn="/tmp/$BASHPID.in"	# Temporary file used to store the blacklist that is being processed
tempOut="/tmp/$BASHPID.out"	# Temporary file that contains the output of the list that is being parsed
fqdn="/tmp/$BASHPID.fqdn"	# Temporary file to store any lines that contain FQDNs



check_source "$1"
if [[ -f $tempIn ]]; then
	# Remove http(s):// if it is present anywhere in the list
	sed -i 's/https\?:\/\///g' "$tempIn"

	# Remove previous version of blacklist object-group and create a new one
	[[ -z $append ]] && printf "no object-group network %s\n" "$2" >> "$tempOut"
	printf "object-group network %s\n" "$2" >> "$tempOut"
	printf "description Modified: %s\n" "$(date)" >> "$tempOut"

	while read line; do
		if [[ $(echo "$line" | head -c 1) != "#" ]] && [[ -n "$line" ]]; then	# Check for commented and whitespace lines
			if echo "$line" | cut -d '/' -f1 | grep -q '[A-Za-z]'; then	# Separate FQDNs and IPv6 from IPv4
				if echo "$line" | cut -d '/' -f1 | grep -q ':'; then	# IPv6
					if ! grep -q "$(echo $line | cut -d '/' -f1)" "$tempOut"; then	# Check for duplicates
						printf "network-object host %s\n" "$(echo $line | cut -d '/' -f1)" >> "$tempOut"
					fi
				else
					printf "%s\n" "$line" >> "$fqdn"
				fi
			elif echo "$line" | grep -q '[A-Za-z]'; then	# IPv4 address with a path attached
				if ! grep -q "$(echo $line | cut -d '/' -f1)" "$tempOut"; then	# Check for duplicates
					printf "network-object host %s\n" "$(echo $line | cut -d '/' -f1)" >> "$tempOut"
				fi
			# Parse all lines that are in CIDR notation
			elif echo "$line" | grep -q /; then
				CIDR=$(echo "$line" | cut -d'/' -f2)
				IP=$(echo "$line" | cut -d'/' -f1)
				NETMASK=$(mask "$CIDR")
				printf "exit\n"	>> "$tempOut"	#Exit out of object-group in order to create the subnet object.
				printf "object network %s\n" "$IP" >> "$tempOut"
				printf "subnet %s %s\n" "$IP" "$NETMASK" >> "$tempOut"
				printf "object-group network %s\n" "$2" >> "$tempOut"	#Re-enter object-group and add the new subnet object.
				printf "network-object object %s\n" "$IP" >> "$tempOut"
			elif echo "$line" | grep -q -; then
				# Parse all lines containing a range of IP addresses
				BEGINIP=$(echo "$line" | cut -d'-' -f1)	#First IP in the range
				ENDIP=$(echo "$line" | cut -d'-' -f2)		#Last IP in the range
				OCT1=$(echo "$BEGINIP" | cut -d'.' -f1)	#First octect of starting IP
				OCT2=$(echo "$BEGINIP" | cut -d'.' -f2)	#Second octect of starting IP
				OCT3=$(echo "$BEGINIP" | cut -d'.' -f3)	#Third octect of starting IP
				OCT4=$(echo "$BEGINIP" | cut -d'.' -f4)	#Fourth octect of starting IP
				((OCT4+=1))
				IP="$OCT1.$OCT2.$OCT3.$OCT4"
				if [[ "$IP" == "$ENDIP" ]]; then	# Test for ranges containing only 2 IP addresses
					printf "network-object host %s\n" "$BEGINIP" >> "$tempOut"
					printf "network-object host %s\n" "$ENDIP" >> "$tempOut"
				else
					printf "exit\n" >> "$tempOut"	# Exit out of the object-group in order to create the range object.
					printf "object network %s\n" "$BEGINIP" >> "$tempOut"
					printf "range %s %s\n" "$BEGINIP" "$ENDIP" >> "$tempOut"
					printf "object-group network %s\n" "$2" >> "$tempOut"	# Re-enter the object-group in order to add the new range object.
					printf "network-object object %s\n" "$BEGINIP" >> "$tempOut"
				fi
			else	#Part 3: Parse remaining lines
				printf "network-object host %s\n" "$line" >> "$tempOut"
			fi
		fi
	done < "$tempIn"

	# Process FQDNs
	if [[ -s "$fqdn" ]]; then
		fqdn_parse "$2"
	fi

	if [[ -z $append ]]; then
		# Add blacklist object-group to the Blocked object-group
		printf "object-group network %s\n" "$blockedGroup" >> "$tempOut"
		printf "group-object %s\n" "$2" >> "$tempOut"
	fi

	# Exit object-group
	printf "exit\n" >> "$tempOut"
else
	echo "Invalid URL: $1"
	echo Skipping blacklist
	printf "%s Invalid URL: %s\n" "$(date)" "$1" >> /var/log/blister.log
fi

# Remove temporary files
[[ -f $tempIn ]] && rm -f "$tempIn"
[[ -f $fqdn ]] && rm -f "$fqdn"

# Remove thread PID from the threads directory
[[ -f /opt/blister/threads/"$BASHPID.pid" ]] && rm /opt/blister/threads/"$BASHPID.pid"
}

dshield_parse() {		# DShield Block List
DSHIELD="$(mktemp)"
tempIn="/tmp/$BASHPID.in"	# Temporary file used to store the blacklist that is being processed
tempOut="/tmp/$BASHPID.out"	# Temporary file that contains the output of the list that is being parsed

if [[ $(curl -s -o "$tempIn" -w "%{http_code}" "$1") -eq 200 ]]; then
	tail -n +30 "$tempIn" > "$DSHIELD"
	awk '{ print $1"/"$3 }' "$DSHIELD" > "$tempIn"
	rm -f "$DSHIELD"

	# Remove previous version of blacklist object-group and create a new one.
	[[ -z $append ]] && printf "no object-group network %s\n" "$2" >> "$tempOut"
	printf "object-group network %s\n" "$2" >> "$tempOut"
	printf "description Modified: %s\n" "$(date)" >> "$tempOut"

	while read line; do
		if [[ $(echo "$line" | head -c 1) != "#" ]] && [[ -n "$line" ]] ; then    # Check for commented and whitespace lines
			CIDR=$(echo "$line" | cut -d'/' -f2)
			IP=$(echo "$line" | cut -d'/' -f1)
			NETMASK=$(mask "$CIDR")
			printf "exit\n" >> "$tempOut"
			printf "object network %s\n" "$IP" >> "$tempOut"
			printf "subnet %s %s\n" "$IP" "$NETMASK" >> "$tempOut"
			printf "object-group network %s\n" "$2" >> "$tempOut"
			printf "network-object object %s\n" "$IP" >> "$tempOut"
		fi
	done < "$tempIn"

	if [[ -z $append ]]; then
		# Add blacklist object-group to the Blocked object-group
		printf "object-group network %s\n" "blockedGroup" >> "$tempOut"
		printf "group-object %s\n" "$2"  >> "$tempOut"
	fi

	## Exit object-group
	printf "exit\n" >> "$tempOut"
else
	echo Invalid URL: https://www.dshield.org/block.txt
	echo Skipping blacklist
	printf "Invalid URL: %s\n" "$1" >> /var/log/blister.log
fi

# Remove temporary blacklist file
[[ -f $tempIn ]] && rm -f "$tempIn"

# Remove thread PID from the threads directory
[[ -f /opt/blister/threads/"$BASHPID.pid" ]] && rm /opt/blister/threads/"$BASHPID.pid"
}

writeOut() {
# Func: Write the output to file

# Create the output file directory if it does not exist
[[ -d $(dirname "$fileOut") ]] || mkdir -pm 644 "$(dirname $fileOut)"

# Enter config t
printf "config t\n" > "$fileOut"

# Add the lists
for i in "${lists[@]}"; do
	if [[ -f /tmp/"$i".out ]]; then
		cat /tmp/"$i".out >> "$fileOut"
		rm /tmp/"$i".out
	fi
done

# Exit config t
printf "exit\n\n" >> "$fileOut"
}

send() {
# Send email
if [[ -n "$email" ]]; then      # Check if an email address has been configured
        if [[ -n $attach ]]; then
                echo "Blister output" | EMAIL="Blister" mutt -a "$fileOut" -s "ASA Blacklist Config" -- "$email"
        else
                cat "$fileOut" | EMAIL="Blister" mutt -s "ASA Blacklist Config" -- "$email"
        fi
fi
}

usage() {
cat <<EOF

Blister - Blacklist to ASA Command Parsing Script
Usage: blister [OPTION]

	Options:
		-h		Usage
		-a		Send output as an email attachment
		-A		Appends list(s) instead of replacing
		-f <FILE>	Parses a single list from a local file
		-o <FILE>	Specifies the name of the output file

EOF
}

exec 2> >(sed "s/^/$(date +'%b %e %Y %T'): /" >> /var/log/blister.err)

# Parse options
while getopts ":haAf:o:" OPT; do
	case "$OPT" in
		h)
			usage
			exit 0
			;;
		a)
			attach=1
			;;
		A)
			append=1
			;;
		f)
			file=1
			source="$OPTARG"
			;;
		o)
			fileOut="$OPTARG"
			;;
		:)
			echo "Invalid option: $OPTARG requires an argument"
			usage
			exit 0
			;;
		\?)
			echo "Invalid option: $OPTARG"
			usage
			exit 0
			;;
	esac
done

# Check if another instance of blister is running before proceeding.
if [[ $(pgrep -c blister) -gt 2 ]]; then
        echo "Another instance of blister is already running. Please try again once it has completed."
	exit 0
fi

# Clear the threads directory if it exists
[[ -d /opt/blister/threads ]] && rm -rf /opt/blister/threads
mkdir -pm 644 /opt/blister/threads

# Run setup if /etc/blister.conf does not exist
[[ -e /etc/blister.conf ]] || setup

# Get the config variables from blister.conf
[[ -z $fileOut ]] && fileOut="$(grep OUTPUT /etc/blister.conf | cut -d'=' -f2)"
blockedGroup="$(grep BLOCKEDGROUP /etc/blister.conf | cut -d'=' -f2)"
maxThreads="$(grep MAXTHREADS /etc/blister.conf | cut -d'=' -f2)"
email="$(grep EMAIL /etc/blister.conf | cut -d'=' -f2)"


# Parse single local file
if [[ -n $file ]]; then
	while [[ -z $objectGroup ]]; do
		read -p "Please enter an object group name for this list: " objectGroup
		if [[ -z $objectGroup ]]; then
			echo "An object group name is required"
		fi
	done
	parse "$source" "$objectGroup" &
	lists=($!)
	wait	# Wait for parser to finish
	writeOut	# Write to output file
	send	# Send email if address exists
	[[ -d /opt/blister/threads ]] && rm -rf /opt/blister/threads
	exit
fi

if ! [[ -f /opt/blister/blacklists ]]; then
	echo "/opt/blister/blacklists does not exist!"
	echo "Exiting..."
	[[ -d /opt/blister/threads ]] && rm -rf /opt/blister/threads
	exit 1
fi

while read -r line; do
	if echo "$line" | grep -vq "^#\|^$"; then
		objectGroup="$(echo $line | cut -d'=' -f1)"	# The group object that this list will be placed in
		URL="$(echo $line | cut -d'=' -f2)"		# The URL where this list can be found
		while [[ $(find /opt/blister/threads/ | wc -l) -ge $maxThreads ]]; do	# Ensure that the  number of threads does not surpass the max number
			sleep 3
		done
		if [[ $URL == 'https://www.dshield.org/block.txt' ]]; then
			dshield_parse "$URL" "$objectGroup" &
			thread="$!"			# Thread PID
		else
			parse "$URL" "$objectGroup" &
			thread="$!"			# Thread PID
		fi
		touch /opt/blister/threads/"$thread.pid"	# Log the thread PID in the active threads directory
		lists+=("$thread")	# Add the PID to the list of all PIDs for use during output
	fi
done </opt/blister/blacklists

# Wait for all threads to finish
wait

# Compile the output from all of the lists
writeOut


# Send email if address exists
send

[[ -d /opt/blister/threads ]] && rm -rf /opt/blister/threads
exit
