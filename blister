#!/bin/bash
#Blister
#Version: 2.3
#Author: Andrew T. Withers (atw31337@gmail.com)
#Description: This script will download and parse blacklists into ASA configuration format. Commented lines, lines starting with a '#', will be ignored.
#All other lines must either contain a valid IPv4 or IPv6 address (192.168.1.0, fd08:23eb:5a25:7df1:0000:0000:0000:0001), a IPv4 subnet in CIDR notation
#(192.168.1.0/24), or an IPv4 range (192.168.1.0-192.168.1.55). Lists that follow this format can be added or removed in the "Declare and Parse Blacklists"
#section. Lists that do not follow this format will require case specific scripting that can be added to the "Special Cases" section. Feel free to contact me for
#assistance or Special Case requests.





############################### Config Me #################################################################################
FILEDIR="/opt/blister/"		#Define the directory location of the output file
FILENAME="blister.output"	#Define the name of the output file
BLOCKEDGROUP="BlockedIPs"	#Object group utilized in ACL to block malicious traffic
EMAIL=""			#Specify a destination email address if you would like the output emailed to you. Note: Requires sendmail and an email server.
RANGEMETHOD=2			#Must be either 1 or 2. Method 1 parses ranges into individual host IPs while method 2 parses ranges into range objects.
###########################################################################################################################

mask() {
#Evaluates CIDR notation and prints the Mask notation equivalent

oct=$(($1 / 8 ))        # First octet that is not equal to 255 (0-3)
mask[0]=255             # First octet must be 255
for (( i=1; i < "$oct"; i++ )); do      # Set octets prior to $oct as 255
        mask["$i"]=255
done
mod=$(( $1 % 8 )) # Determine the mask value for the first octect that is not equal to 255
if [[ $mod  -gt 0 ]]; then
        expo=$(( 8 - mod ))
        value=$(( 256 - 2**expo ))
        mask["$oct"]=$value
fi
for (( i=1; i<4; i++ )); do
        if [[ -z ${mask["$i"]} ]]; then         # Set remaining octets to 0
                mask["$i"]=0
        fi
done
echo "${mask[0]}.${mask[1]}.${mask[2]}.${mask[3]}"      # Print the mask
}

Parse() {

if [[ $(curl -s -o $TEMP -w "%{http_code}" $1) -eq 200 ]]; then
	#Remove previous version of blacklist object-group and create a new one.
	printf "no object-group network %s\n" "$2" >> $FQFP
	printf "object-group network %s\n" "$2" >> $FQFP
	printf "description Retrieved: %s\n" "$(date)" >> $FQFP

	while read line; do
		if [[ $(echo $line | head -c 1) != "#" ]] && [[ -n "$line" ]]; then	#Check for commented and whitespace lines
			#Part 1: Parse all lines that are in CIDR notation
			if echo $line | grep -q /; then
				CIDR=$(echo $line | cut -d'/' -f2)
				IP=$(echo $line | cut -d'/' -f1)
				NETMASK=$(mask $CIDR)
				printf "exit\n"	>> $FQFP	#Exit out of object-group in order to create the subnet object.
				printf "object network %s\n" "$IP" >> $FQFP
				printf "subnet %s %s\n" "$IP" "$NETMASK" >> $FQFP
				printf "object-group network %s\n" "$2" >> $FQFP	#Re-enter object-group and add the new subnet object.
				printf "network-object object %s\n" "$IP" >> $FQFP
			elif echo $line | grep -q -; then
				#Part 2: Parse all lines containing a range of IP addresses
				BEGINIP=$(echo $line | cut -d'-' -f1)	#First IP in the range
				ENDIP=$(echo $line | cut -d'-' -f2)		#Last IP in the range
				OCT1=$(echo $BEGINIP | cut -d'.' -f1)	#First octect of starting IP
				OCT2=$(echo $BEGINIP | cut -d'.' -f2)	#Second octect of starting IP
				OCT3=$(echo $BEGINIP | cut -d'.' -f3)	#Third octect of starting IP
				OCT4=$(echo $BEGINIP | cut -d'.' -f4)	#Fourth octect of starting IP

				##Method 1: Parse ranges into individual host IPs
				if [ $RANGEMETHOD -eq 1 ]; then
					IP=$BEGINIP
					printf "network-object host %s\n" "$BEGINIP" >> $FQFP

					while [ $IP != $ENDIP ]; do
						if [ $OCT4 -eq 255 ]; then
							OCT4=0
							if [ $OCT3 -eq 255 ]; then
								OCT3=0
								if [ $OCT2 -eq 255 ]; then
									OCT2=0
									((OCT1+=1))
								else
									((OCT2+=1))
								fi
							else
								((OCT3+=1))
							fi
						else
							((OCT4+=1))
						fi
						IP="$OCT1.$OCT2.$OCT3.$OCT4"
						printf "network-object host %s\n" "$IP" >> $FQFP
					done

				elif [ $RANGEMETHOD -eq 2 ]; then	##Method 2: Create IP range objects
					((OCT4+=1))
					IP="$OCT1.$OCT2.$OCT3.$OCT4"
					if [ $IP == $ENDIP ]; then	#Test for ranges containing only 2 IP addresses
						printf "network-object host %s\n" "$BEGINIP" >> $FQFP
						printf "network-object host %s\n" "$ENDIP" >> $FQFP
					else
						printf "exit\n" >> $FQFP	#Exit out of the object-group in order to create the range object.
						printf "object network %s\n" "$BEGINIP" >> $FQFP
						printf "range $BEGINIP %s\n" "$ENDIP" >> $FQFP
						printf "object-group network %s\n" "$2" >> $FQFP	#Re-enter the object-group in order to add the new range object.
						printf "network-object object %s\n" "$BEGINIP" >> $FQFP
					fi
				else
					(>&2 printf "Error: Failed to parse range IPs. RANGEMETHOD has been improperly configured.\n\n")
				fi
			else	#Part 3: Parse remaining lines
				printf "network-object host %s\n" "$line" >> $FQFP
			fi
		fi
	done < $TEMP

	#Add blacklist object-group to the Blocked object-group
	printf "object-group network %s\n" "$BLOCKEDGROUP" >> $FQFP
	printf "group-object %s\n" "$2" >> $FQFP

	#Exit object-group
	printf "exit\n" >> $FQFP
else
	echo Invalid URL: $1
	echo Skipping blacklist
	printf "%s Invalid URL: %s\n" "$(date)" "$1" >> /var/log/blister.log
fi
rm -f $TEMP	# Remove blacklist file
}

# Ensure that no other blister process is running
if [[ $(pgrep -c blister) -gt 1 ]]; then
	echo "Another instance of blister is already running"
	exit
fi

# Remove previous log file
if [[ -e /var/log/blister.log ]]; then
	rm /var/log/blister.log
fi


###################################### Set File Locations and Enter Config Mode ##########################################

FQFP="$FILEDIR$FILENAME"		#Fully Qualified File Path of output file
TEMP=$FILEDIR"temp"			#Temporary file used to store the blacklist that is being processed

if [[ ! -d $FILEDIR ]]; then
        mkdir -p -m 664 $FILEDIR
fi

printf "config t\n" > $FQFP


##################### Declare and Parse Blacklists ######################

#Spamhaus Drop List
URL="https://panwdbl.appspot.com/lists/shdrop.txt"
OBJECTGROUP="SpamhausDropList"

Parse $URL $OBJECTGROUP

#CINS Active Threats Intelligence
URL="http://cinsscore.com/list/ci-badguys.txt"
OBJECTGROUP="CINS_ActiveThreats"

Parse $URL $OBJECTGROUP

#Tor Network	Note: This blacklist can only be downloaded once every 30 minutes.
URL="https://www.dan.me.uk/torlist/"
OBJECTGROUP="Tor_Network"

Parse $URL $OBJECTGROUP

#ET Known Compromised or Hostile Traffic Hosts
URL="https://rules.emergingthreats.net/blockrules/compromised-ips.txt"
OBJECTGROUP="ETKnownCompromised"

Parse $URL $OBJECTGROUP

#Ransomeware Tracker CnC Servers
URL="https://ransomwaretracker.abuse.ch/downloads/RW_IPBL.txt"
OBJECTGROUP="RansomwareCnC"

Parse $URL $OBJECTGROUP

#Zeus Tracker CnC Servers
URL="https://zeustracker.abuse.ch/blocklist.php?download=badips"
OBJECTGROUP="ZeusTracker"

Parse $URL $OBJECTGROUP

#Malware Domain List
URL="https://panwdbl.appspot.com/lists/mdl.txt"
OBJECTGROUP="MalwareDomainList"

Parse $URL $OBJECTGROUP

#Brute Force Blocker
URL="https://panwdbl.appspot.com/lists/bruteforceblocker.txt"
OBJECTGROUP="BruteForceBlocker"

Parse $URL $OBJECTGROUP

#SSL Abuse List
URL="https://panwdbl.appspot.com/lists/sslabuseiplist.txt"
OBJECTGROUP="SSLAbuseList"

Parse $URL $OBJECTGROUP

#Feodo Tracker CnC Servers
URL="https://feodotracker.abuse.ch/downloads/ipblocklist.txt"
OBJECTGROUP="FeodoTracker"

Parse $URL $OBJECTGROUP

################################# Special Cases #######################################

#DShield Block List
DSHIELD=$FILEDIR"dshield"

if [[ $(curl -s -o $TEMP -w "%{http_code}" https://www.dshield.org/block.txt) -eq 200 ]]; then
	tail -n +30 $TEMP > $DSHIELD
	cat $DSHIELD | awk '{ print $1"/"$3 }' > $TEMP
	rm -f $DSHIELD

	#Remove previous version of blacklist object-group and create a new one.
	printf "no object-group network DShield_Block_List\n" >> $FQFP
	printf "object-group network DShield_Block_List\n" >> $FQFP
	printf "description Retrieved: %s\n" "$(date)" >> $FQFP

	while read line; do
		if [[ $(echo $line | head -c 1) != "#" ]] && [[ -n "$line" ]] ; then	#Check for commented and whitespace lines
			CIDR=$(echo $line | cut -d'/' -f2)
			IP=$(echo $line | cut -d'/' -f1)
			NETMASK=$(mask $CIDR)
			printf "exit\n" >> $FQFP
			printf "object network $IP\n" >> $FQFP
			printf "subnet %s %s\n" "$IP" "$NETMASK" >> $FQFP
			printf "object-group network DShield_Block_List\n" >> $FQFP
			printf "network-object object %s\n" "$IP" >> $FQFP
		fi
	done < $TEMP

	#Add blacklist object-group to the Blocked object-group
	printf "object-group network %s\n" "$BLOCKEDGROUP" >> $FQFP
	printf "group-object DShield_Block_List\n" >> $FQFP

	##Exit object-group and remove blacklist file
	printf "exit\n" >> $FQFP
else
	echo Invalid URL: https://www.dshield.org/block.txt
	echo Skipping blacklist
	printf "Invalid URL: https://www.dshield.org/block.txt\n" >> /var/log/blister.log
fi
rm -f $TEMP

##Exit config t
printf "exit\n\n" >> $FQFP

################################## Email Output ########################################
if [ ! -z "$EMAIL" ]; then	#Check if an email address has been configured
	printf "To: %s\nSubject: ASA Blacklist Config\nFrom: Blister\n\n" "$EMAIL" > $TEMP
	cat $FQFP >> $TEMP
	sendmail -vt < $TEMP
	rm -f $TEMP
fi

exit
